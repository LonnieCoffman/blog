---
layout: post
date: 2016-10-24 14:05
title: "Benchmarking Ruby Code Using Benchmark and Benchmark-ips"
description: How to benchmark Ruby code using the benchmark module and the benchmark-ips Ruby gem.
comments: true
category:
- how-to
tags:
- ruby
- how-to
---
<figure class="alignleft">
	<img src="{{ site.image }}benchmark.png" width="120"/>
</figure>
In Ruby there are many ways of writing code to accomplish the same thing. Some
are one liners while others are rather verbose. While choosing one over the other
may simply be a matter of personal preference, I am of the belief that faster
execution should also be a factor. Using the Benchmark module and the benchmark-ips
gem we can determine which code runs faster.

### Ruby's Benchmark Module
The benchmark module from the Ruby Standard Libraray measures the time that it
takes to execute a specific section of code.  it generates data in seconds in
the following format:
{% highlight text %}
user       system     total     real
0.970000   0.000000   0.970000 (  0.970493)
{% endhighlight %}
* <code>user = User CPU Time</code> - the time spent processing your code
* <code>system = System CPU Time</code> - the time spent kernel code such as system calls.
* <code>total = Total CPU Time</code> - User CPU Time + System CPU Time
* <code>real = Real Time</code> - the actual time that execution took

### Testing with The Benchmark Module
I am a big fan of the Ternary operator.  Let's see if it is faster than other ways of evaluating conditions.  Using the following code we can test the traditional if else, multiple one line if statements, the case statement operator and the ternary operator.
{% highlight ruby linenos%}
require 'benchmark'
x = 4

Benchmark.bmbm do |test|
  test.report('If Else:') do
    10_000_000.times do
      if x == 4
        y = 'x is 4'
      else
        y = 'x is not 4'
      end
    end
  end

  test.report('Ternary Operation:') do
    10_000_000.times do
      y = x == 4 ? 'x is 4' : 'x is not 4'
    end
  end

  test.report('Multiple Ifs:') do
    10_000_000.times do
      y = 'x is 4' if x == 4
      y = 'x is not 4' if x != 4
    end
  end

  test.report('Case Statement:') do
    10_000_000.times do
      case x
      when 4
        y = 'x is 4'
      else
        y = 'x is not 4'
      end
    end
  end
end
{% endhighlight %}
In the code above we used the Benchmark#bmbm method in order to avoid any garbage
collection overhead and get the runtime environment stable.  This is done by running
two passes, the first being a rehearsal. Each block is run ten million times in order
to get enough iterations to compare data.  Executing the code above we get the following:
{% highlight text %}
Rehearsal ------------------------------------------------------
If Else:             0.590000   0.000000   0.590000 (  0.588716)
Ternary Operation:   0.570000   0.000000   0.570000 (  0.572485)
Multiple Ifs:        0.690000   0.000000   0.690000 (  0.684352)
Case Statement:      0.640000   0.000000   0.640000 (  0.641176)
--------------------------------------------- total: 2.490000sec

                         user     system      total        real
If Else:             0.580000   0.000000   0.580000 (  0.586391)
Ternary Operation:   0.580000   0.000000   0.580000 (  0.574963)
Multiple Ifs:        0.710000   0.010000   0.720000 (  0.711071)
Case Statement:      0.640000   0.000000   0.640000 (  0.640359)
{% endhighlight %}
Looking at the information above we can see that the performance of the Ternary
operator is nearly identical to the traditional if-else statement (remember this
is over 10 million iterations.), while the case statement and multiple if statements
offer a mild speed degradation.

### More Informative Results With The Benchmark-ips Gem

The benchmark module provided

{% highlight ruby linenos%}
require 'benchmark/ips'

x = 4

Benchmark.ips do |test|
  test.report('If Else:') do
    if x == 4
      y = 1
    else
      y = 0
    end
  end

  test.report('Ternary Operation:') do
    y = x == 4 ? 1 : 0
  end

  test.report('Multiple Ifs:') do
    y = 1 if x == 4
    y = 0 if x != 4
  end

  test.report('Case Statement:') do
    case x
    when 4
      y = 1
    else
      y = 0
    end
  end

  test.compare!
end
{% endhighlight %}

results

{% highlight text %}
Warming up --------------------------------------
            If Else:   403.483k i/100ms
  Ternary Operation:   404.654k i/100ms
       Multiple Ifs:   394.553k i/100ms
     Case Statement:   398.227k i/100ms
Calculating -------------------------------------
            If Else:     14.431M (± 4.0%) i/s -     72.223M in   5.012516s
  Ternary Operation:     14.966M (± 4.6%) i/s -     74.861M in   5.012426s
       Multiple Ifs:     13.037M (± 4.4%) i/s -     65.101M in   5.003172s
     Case Statement:     13.848M (± 4.1%) i/s -     69.291M in   5.011824s

Comparison:
  Ternary Operation:: 14966318.9 i/s
            If Else:: 14431139.1 i/s - same-ish: difference falls within error
     Case Statement:: 13848442.9 i/s - same-ish: difference falls within error
       Multiple Ifs:: 13036592.7 i/s - 1.15x  slower
{% endhighlight %}
